"""
M√≥dulo de autentica√ß√£o para Gmail API usando OAuth2 com vari√°veis de ambiente
"""

import os
import json
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build


# Configura√ß√£o
LABEL_NAME = 'DOC-MEDICOS'

# Scopes necess√°rios para Gmail (vers√£o mais permissiva para desenvolvimento)
SCOPES = [
    'https://www.googleapis.com/auth/gmail.readonly',
    'https://www.googleapis.com/auth/gmail.modify'
]

# Para desenvolvimento, voc√™ pode usar apenas readonly se quiser:
# SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']


def get_credentials_from_env():
    """
    Obt√©m credenciais OAuth2 das vari√°veis de ambiente.
    
    Returns:
        dict: Conte√∫do das credenciais
    """
    credentials_content = os.environ.get('GOOGLE_CREDENTIALS_JSON')
    if not credentials_content:
        raise ValueError(
            "Vari√°vel de ambiente GOOGLE_CREDENTIALS_JSON n√£o encontrada. "
            "Configure-a com o conte√∫do do arquivo credentials.json"
        )
    
    try:
        return json.loads(credentials_content)
    except json.JSONDecodeError as e:
        raise ValueError(f"Erro ao decodificar GOOGLE_CREDENTIALS_JSON: {e}")


def get_token_from_env():
    """
    Obt√©m token OAuth2 das vari√°veis de ambiente.
    
    Returns:
        dict: Conte√∫do do token (sem o campo expiry)
    """
    token_content = os.environ.get('GOOGLE_TOKEN_JSON')
    if not token_content:
        return None
    
    try:
        token_data = json.loads(token_content)
        # Remove o campo expiry se existir - deixa o Google lidar com isso
        if 'expiry' in token_data:
            del token_data['expiry']
        return token_data
    except json.JSONDecodeError as e:
        raise ValueError(f"Erro ao decodificar GOOGLE_TOKEN_JSON: {e}")


def save_token_to_env(credentials):
    """
    Salva o token atualizado na vari√°vel de ambiente (sem expiry).
    
    Args:
        credentials: Credenciais do Google
    """
    token_data = json.loads(credentials.to_json())
    # Remove o campo expiry se existir - deixa o Google lidar com isso
    if 'expiry' in token_data:
        del token_data['expiry']
    
    # Nota: Em produ√ß√£o, voc√™ deve usar um sistema seguro para atualizar
    # vari√°veis de ambiente. Este √© apenas um exemplo.
    print("üíæ Token atualizado. Em produ√ß√£o, atualize a vari√°vel GOOGLE_TOKEN_JSON.")
    print(f"Novo token (sem expiry): {json.dumps(token_data)}")


def get_gmail_credentials():
    """
    Cria e retorna credenciais autenticadas para Gmail API usando OAuth2 com vari√°veis de ambiente.
    
    Returns:
        google.oauth2.credentials.Credentials: Credenciais autenticadas
    """
    creds = None
    
    # Verifica se j√° existe token nas vari√°veis de ambiente
    token_data = get_token_from_env()
    if token_data:
        print("üìÅ Carregando token das vari√°veis de ambiente...")
        creds = Credentials.from_authorized_user_info(token_data, SCOPES)
    
    # Se n√£o h√° credenciais v√°lidas dispon√≠veis
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            print("üîÑ Renovando token expirado...")
            creds.refresh(Request())
            save_token_to_env(creds)
        else:
            # Obt√©m credenciais das vari√°veis de ambiente
            credentials_data = get_credentials_from_env()
            
            print("üîê Iniciando fluxo de autentica√ß√£o OAuth2...")
            print("Uma janela do navegador ser√° aberta para autoriza√ß√£o.")
            
            # Inicia o fluxo OAuth2
            flow = InstalledAppFlow.from_client_config(
                credentials_data, SCOPES)
            creds = flow.run_local_server(port=0)
            
            print("‚úÖ Autoriza√ß√£o conclu√≠da!")
            save_token_to_env(creds)
    
    return creds


def get_gmail_service():
    """
    Cria e retorna um servi√ßo autenticado do Gmail API.
    
    Returns:
        googleapiclient.discovery.Resource: Servi√ßo Gmail API
    """
    credentials = get_gmail_credentials()
    service = build('gmail', 'v1', credentials=credentials)
    return service


def refresh_credentials(credentials):
    """
    Atualiza as credenciais se necess√°rio.
    
    Args:
        credentials: Credenciais do Google
        
    Returns:
        google.oauth2.credentials.Credentials: Credenciais atualizadas
    """
    if credentials.expired and credentials.refresh_token:
        credentials.refresh(Request())
        save_token_to_env(credentials)
    
    return credentials


def validate_authentication():
    """
    Valida se a autentica√ß√£o est√° funcionando corretamente.
    
    Returns:
        bool: True se a autentica√ß√£o est√° funcionando, False caso contr√°rio
    """
    try:
        print("üîê Validando autentica√ß√£o OAuth2...")
        print("   Usando vari√°veis de ambiente para credenciais")
        print(f"   Scopes: {SCOPES}")
        
        service = get_gmail_service()
        
        # Tenta fazer uma requisi√ß√£o simples para validar
        profile = service.users().getProfile(userId='me').execute()
        email = profile.get('emailAddress')
        
        print(f"‚úÖ Autentica√ß√£o bem-sucedida para: {email}")
        
        # Mostra informa√ß√µes adicionais
        total_messages = profile.get('messagesTotal', 0)
        total_threads = profile.get('threadsTotal', 0)
        
        print(f"üìä Informa√ß√µes da conta:")
        print(f"   Total de mensagens: {total_messages}")
        print(f"   Total de threads: {total_threads}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na autentica√ß√£o: {str(e)}")
        print("\nüîß Poss√≠veis solu√ß√µes:")
        print("1. Verificar se a vari√°vel GOOGLE_CREDENTIALS_JSON est√° configurada")
        print("2. Verificar se a vari√°vel GOOGLE_TOKEN_JSON est√° configurada")
        print("3. Verificar se os scopes est√£o corretos no Google Cloud Console")
        print("4. Verificar se a API Gmail est√° habilitada no projeto")
        return False


def check_oauth_info():
    """
    Mostra informa√ß√µes do OAuth2 para debug
    """
    try:
        print("üìã Informa√ß√µes do OAuth2:")
        
        # Informa√ß√µes das vari√°veis de ambiente
        credentials_env = os.environ.get('GOOGLE_CREDENTIALS_JSON')
        if credentials_env:
            try:
                cred_info = json.loads(credentials_env)
                installed = cred_info.get('installed', {})
                print(f"   Project ID: {installed.get('project_id')}")
                print(f"   Client ID: {installed.get('client_id')}")
                print(f"   Auth URI: {installed.get('auth_uri')}")
                print("   ‚úÖ GOOGLE_CREDENTIALS_JSON configurada")
            except json.JSONDecodeError:
                print("   ‚ùå GOOGLE_CREDENTIALS_JSON mal formada")
        else:
            print("   ‚ùå Vari√°vel GOOGLE_CREDENTIALS_JSON n√£o encontrada")
        
        # Informa√ß√µes do token
        token_env = os.environ.get('GOOGLE_TOKEN_JSON')
        if token_env:
            try:
                token_info = json.loads(token_env)
                print(f"   Token v√°lido: {'‚úÖ' if token_info.get('token') else '‚ùå'}")
                print(f"   Refresh token: {'‚úÖ' if token_info.get('refresh_token') else '‚ùå'}")
                print("   ‚úÖ GOOGLE_TOKEN_JSON configurada")
                # N√£o mostra mais expiry pois foi removido
                print("   ‚ÑπÔ∏è  Campo 'expiry' removido - Google gerencia automaticamente")
            except json.JSONDecodeError:
                print("   ‚ùå GOOGLE_TOKEN_JSON mal formada")
        else:
            print("   ‚ùå Vari√°vel GOOGLE_TOKEN_JSON n√£o encontrada")
            
    except Exception as e:
        print(f"Erro ao ler informa√ß√µes OAuth2: {e}")


def reset_authentication():
    """
    Remove o token das vari√°veis de ambiente para for√ßar nova autentica√ß√£o
    """
    try:
        if os.environ.get('GOOGLE_TOKEN_JSON'):
            print("‚ÑπÔ∏è  Para resetar a autentica√ß√£o, remova a vari√°vel GOOGLE_TOKEN_JSON.")
            print("   Em seguida, execute novamente o programa para nova autentica√ß√£o.")
        else:
            print("‚ÑπÔ∏è  Vari√°vel GOOGLE_TOKEN_JSON n√£o encontrada. Nova autentica√ß√£o ser√° necess√°ria.")
    except Exception as e:
        print(f"Erro ao verificar token: {e}")
